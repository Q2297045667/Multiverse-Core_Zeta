import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'java-library'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

version = '4.3.13-zeta_folia-experimental'
group = 'com.onarandombox.multiversecore'
description = 'Multiverse-Core'

java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenLocal()
    mavenCentral()

    maven {
        url = uri('https://mvn-repo.arim.space/lesser-gpl3/')
    }

    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/repositories/snapshots/')
    }

    maven {
        url = uri('https://repo.onarandombox.com/content/groups/public')
    }

    maven {
        url = uri('https://hub.spigotmc.org/nexus/content/groups/public/')
    }

    maven {
        url = uri('https://jitpack.io')
    }

    maven {
        url = uri('https://repo.minebench.de/')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'org.bukkit:bukkit:1.13.2-R0.1-SNAPSHOT'
    compileOnly 'space.arim.morepaperlib:morepaperlib:0.4.3'

    implementation('com.github.MilkBowl:VaultAPI:1.7') {
        exclude group: 'org.bukkit', module: 'bukkit'
    }
    compileOnly fileTree(dir: 'libs', include: ['*.jar'])

    compileOnly('me.main__.util:SerializationConfig:1.7') {
        exclude group: 'org.bukkit', module: 'bukkit'
    }
    compileOnly('com.pneumaticraft.commandhandler:CommandHandler:11') {
        exclude group: 'org.bukkit', module: 'bukkit'
        exclude group: 'junit', module: 'junit'
    }
    compileOnly 'com.dumptruckman.minecraft:buscript:2.0-SNAPSHOT'
    compileOnly 'org.bstats:bstats-bukkit:2.2.1'
    compileOnly('com.dumptruckman.minecraft:Logging:1.1.1') {
        exclude group: 'junit', module: 'junit'
    }
    compileOnly 'de.themoep.idconverter:mappings:1.2-SNAPSHOT'
    compileOnly 'org.jetbrains:annotations:16.0.2'

}


java {
    withSourcesJar()
    withJavadocJar()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(Javadoc) {
    options.encoding = 'UTF-8'
}


configurations {
    [apiElements, runtimeElements].each {
        it.outgoing.artifacts.removeIf { it.buildDependencies.getDependencies(null).contains(jar) }
        it.outgoing.artifact(shadowJar)
    }

    testCompileOnly.extendsFrom compileOnly
    testRuntimeOnly.extendsFrom testCompileOnly

    shadowed.extendsFrom compileOnly {
        canBeResolved = true
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom.withXml {
                asNode().dependencies.'*'.findAll() {
                    it.scope.text() == 'runtime'  && project.configurations.implementation.allDependencies.find { dep ->
                        dep.name == it.artifactId.text()
                    }
                }.each() {
                    it.scope*.value = 'provided'
                }
            }
        }
    }
    repositories {
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/Multiverse/Multiverse-Core"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
        maven {
            name = "multiverse"
            def releasesRepoUrl = "https://repo.dumptruckman.com/multiverse-releases"
            def snapshotsRepoUrl = "https://repo.dumptruckman.com/multiverse-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials(PasswordCredentials)
        }
    }
}


ext.bitlyAccessToken = System.getenv('BITLY_ACCESS_TOKEN') ?: 'bitly-access-token'

task prepareSource(type: Sync) {
    inputs.property 'bitlyAccessToken', bitlyAccessToken
    from sourceSets.main.java
    into "$buildDir/src"
    filter(ReplaceTokens, tokens: [
            'bitly-access-token': bitlyAccessToken,
    ])
}

compileJava {
    source = prepareSource.outputs
}

processResources {
    def props = [version: "${project.version}"]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }

    // This task should never be skipped. The tests depend on this having been run but we want the new version number
    // that is created after tests are run and before we run again to publish.
    outputs.upToDateWhen { false }
}


javadoc {
    source = sourceSets.main.allJava
    classpath = configurations.compileClasspath
}


project.configurations.api.canBeResolved = true

shadowJar {
    relocate 'me.main__.util', 'com.onarandombox.serializationconfig'
    relocate 'com.pneumaticraft.commandhandler', 'com.onarandombox.commandhandler'
    relocate 'buscript', 'com.onarandombox.buscript'
    relocate 'org.bstats', 'com.onarandombox.bstats'
    relocate 'com.dumptruckman.minecraft.util.Logging', 'com.onarandombox.MultiverseCore.utils.CoreLogging'
    relocate 'com.dumptruckman.minecraft.util.DebugLog', 'com.onarandombox.MultiverseCore.utils.DebugFileLogger'
    relocate 'org.codehaus.jettison', 'com.onarandombox.jettison'
    relocate 'de.themoep.idconverter', 'com.onarandombox.idconverter'
    relocate 'space.arim.morepaperlib', 'com.onarandombox.morepaperlib'
    relocate 'ltd.rymc.folialib', 'com.onarandombox.folialib'

    configurations = [project.configurations.shadowed]

    archiveFileName = "$baseName-$version.$extension"
    classifier = ''
}

build.dependsOn shadowJar
jar.enabled = false
